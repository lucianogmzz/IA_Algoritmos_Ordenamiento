# Importamos cmp_to_key para poder usar una función de comparación personalizada al ordenar
from functools import cmp_to_key

# Importamos networkx y matplotlib para crear y visualizar grafos
import networkx as nx
import matplotlib.pyplot as plt

# Esta función compara dos aristas según su peso (3er elemento en la tupla/lista)
def comparator(a, b):
    return a[2] - b[2]  # Si el peso de 'a' es menor que el de 'b', retorna negativo (para orden ascendente)

# Clase para representar conjuntos disjuntos (Union-Find), esencial para Kruskal
class DSU:
    def __init__(self, n):
        # Inicialmente, cada nodo es su propio padre (conjunto independiente)
        self.parent = list(range(n))
        # Cada conjunto tiene un rango (profundidad), útil para unir de forma eficiente
        self.rank = [1] * n

    # Función para encontrar el líder de un conjunto, con compresión de caminos
    def find(self, i):
        if self.parent[i] != i:
            self.parent[i] = self.find(self.parent[i])  # Compresión de caminos
        return self.parent[i]

    # Función para unir dos conjuntos si son diferentes
    def union(self, x, y):
        s1 = self.find(x)
        s2 = self.find(y)
        if s1 != s2:
            if self.rank[s1] < self.rank[s2]:
                self.parent[s1] = s2
            elif self.rank[s1] > self.rank[s2]:
                self.parent[s2] = s1
            else:
                self.parent[s2] = s1
                self.rank[s1] += 1

# Implementación del algoritmo de Kruskal
def kruskals_mst(V, edges):
    # Ordenamos las aristas por peso usando la función de comparación
    edges = sorted(edges, key=cmp_to_key(comparator))
    
    # Inicializamos estructura DSU y otras variables
    dsu = DSU(V)
    cost = 0  # Costo total del MST
    count = 0  # Número de aristas en el MST
    mst_edges = []  # Guardamos las aristas que formarán parte del MST

    for x, y, w in edges:
        # Si los nodos no forman un ciclo, los unimos
        if dsu.find(x) != dsu.find(y):
            dsu.union(x, y)
            cost += w  # Sumamos el peso al costo total
            mst_edges.append((x, y, w))  # Añadimos arista al MST
            count += 1
            if count == V - 1:  # Si tenemos V-1 aristas, el MST está completo
                break

    return cost, mst_edges  # Devolvemos costo total y aristas del MST

# Función para visualizar el grafo original y el MST con colores distintos
def draw_graph(V, edges, mst_edges):
    G = nx.Graph()

    # Añadimos todas las aristas del grafo original
    for u, v, w in edges:
        G.add_edge(u, v, weight=w)

    pos = nx.spring_layout(G)  # Calculamos posiciones para los nodos

    # Dibujamos nodos
    nx.draw_networkx_nodes(G, pos, node_size=700, node_color='lightblue')

    # Dibujamos todas las aristas en gris claro (el grafo original)
    nx.draw_networkx_edges(G, pos, edgelist=[(u, v) for u, v, w in edges], width=1.5, alpha=0.5, edge_color='gray')

    # Dibujamos las aristas del MST en rojo
    nx.draw_networkx_edges(G, pos, edgelist=[(u, v) for u, v, w in mst_edges], width=2.5, edge_color='red')

    # Añadimos etiquetas con pesos en las aristas
    labels = {(u, v): w for u, v, w in edges}
    nx.draw_networkx_edge_labels(G, pos, edge_labels=labels)

    # Añadimos etiquetas en los nodos
    nx.draw_networkx_labels(G, pos, font_size=12, font_family="sans-serif")

    plt.title("Grafo Original (gris) y MST (rojo)")
    plt.axis("off")  # Ocultamos ejes
    plt.show()

# Bloque principal de ejecución
if __name__ == '__main__':
    # Definimos una lista de aristas, donde cada arista es [nodo1, nodo2, peso]
    edges = [[0, 1, 10], [1, 3, 15], [2, 3, 4], [2, 0, 6], [0, 3, 5]]

    # Calculamos el MST y su costo total
    cost, mst_edges = kruskals_mst(4, edges)

    print(f"Costo total del MST: {cost}")
    print("Aristas del MST:", mst_edges)

    # Visualizamos el grafo original y el MST
    draw_graph(4, edges, mst_edges)
