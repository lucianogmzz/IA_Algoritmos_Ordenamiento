from functools import cmp_to_key
import networkx as nx
import matplotlib.pyplot as plt

# Compara dos aristas por peso, pero en orden descendente para encontrar el Árbol Máximo
def comparator_desc(a, b):
    return b[2] - a[2]  # Compara al revés: mayor peso primero

# Clase para la estructura de conjuntos disjuntos (Union-Find)
class DSU:
    def __init__(self, n):
        self.parent = list(range(n))  # Cada nodo es inicialmente su propio padre
        self.rank = [1] * n           # Inicializamos rango de cada conjunto como 1

    def find(self, i):
        if self.parent[i] != i:
            self.parent[i] = self.find(self.parent[i])  # Compresión de caminos
        return self.parent[i]

    def union(self, x, y):
        s1 = self.find(x)
        s2 = self.find(y)
        if s1 != s2:
            if self.rank[s1] < self.rank[s2]:
                self.parent[s1] = s2
            elif self.rank[s1] > self.rank[s2]:
                self.parent[s2] = s1
            else:
                self.parent[s2] = s1
                self.rank[s1] += 1

# Kruskal para encontrar el Árbol de Expansión Máximo
def kruskals_maxst(V, edges):
    # Ordenamos por peso descendente
    edges = sorted(edges, key=cmp_to_key(comparator_desc))

    dsu = DSU(V)
    cost = 0
    count = 0
    maxst_edges = []

    for x, y, w in edges:
        if dsu.find(x) != dsu.find(y):  # Si no forman un ciclo
            dsu.union(x, y)
            cost += w
            maxst_edges.append((x, y, w))
            count += 1
            if count == V - 1:
                break

    return cost, maxst_edges

# Visualización del grafo original y del Árbol Máximo
def draw_graph(V, edges, maxst_edges):
    G = nx.Graph()

    for u, v, w in edges:
        G.add_edge(u, v, weight=w)

    pos = nx.spring_layout(G)

    nx.draw_networkx_nodes(G, pos, node_size=700, node_color='lightblue')

    # Grafo original en gris
    nx.draw_networkx_edges(G, pos, edgelist=[(u, v) for u, v, w in edges],
                           width=1.5, alpha=0.5, edge_color='gray')

    # Árbol máximo en verde oscuro
    nx.draw_networkx_edges(G, pos, edgelist=[(u, v) for u, v, w in maxst_edges],
                           width=2.5, edge_color='darkgreen')

    labels = {(u, v): w for u, v, w in edges}
    nx.draw_networkx_edge_labels(G, pos, edge_labels=labels)
    nx.draw_networkx_labels(G, pos, font_size=12, font_family="sans-serif")

    plt.title("Grafo Original (gris) y Árbol de Expansión Máximo (verde)")
    plt.axis("off")
    plt.show()

# Bloque principal
if __name__ == '__main__':
    # Lista de aristas: [nodo1, nodo2, peso]
    edges = [[0, 1, 10], [1, 3, 15], [2, 3, 4], [2, 0, 6], [0, 3, 5]]

    cost, maxst_edges = kruskals_maxst(4, edges)

    print(f"Costo total del Árbol de Expansión Máximo: {cost}")
    print("Aristas del Árbol Máximo:", maxst_edges)

    draw_graph(4, edges, maxst_edges)
