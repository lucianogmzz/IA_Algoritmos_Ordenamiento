# Luciano Alejandro Gómez Muñoz 22310214

# Algoritmo de Ordenamiento Polifásico (Polyphase Sort)
# -----------------------------------------------------------------
# Polyphase Sort es un algoritmo de ordenamiento externo usado cuando los datos 
# son tan grandes que no caben en memoria. Se basa en el algoritmo de mezcla (merge)
# pero emplea múltiples archivos (o listas) para almacenar series parcialmente 
# ordenadas y luego las mezcla inteligentemente en fases.
#
# Este algoritmo optimiza el número de lecturas/escrituras a disco, por lo que es 
# ideal en contextos donde los accesos a archivos son costosos.
#
# A continuación, se muestra una simulación del Polyphase Sort con listas en memoria.

def dividir_en_series_ordenadas(lista):
    """
    Divide la lista en sublistas ordenadas (series naturales).
    """
    series = []
    temp = [lista[0]]

    for i in range(1, len(lista)):
        if lista[i] >= lista[i - 1]:
            temp.append(lista[i])
        else:
            series.append(temp)
            temp = [lista[i]]

    series.append(temp)
    return series

def merge(izquierda, derecha):
    """
    Fusiona dos sublistas ordenadas.
    """
    resultado = []
    i = j = 0

    while i < len(izquierda) and j < len(derecha):
        if izquierda[i] <= derecha[j]:
            resultado.append(izquierda[i])
            i += 1
        else:
            resultado.append(derecha[j])
            j += 1

    resultado.extend(izquierda[i:])
    resultado.extend(derecha[j:])
    return resultado

def polyphase_sort(lista):
    """
    Simulación del algoritmo Polyphase Sort con listas en memoria.
    """
    # Paso 1: Dividimos la lista en series ordenadas (naturales)
    series = dividir_en_series_ordenadas(lista)

    # Simulamos 3 archivos: F1, F2, F3
    f1 = series  # Contiene inicialmente las series ordenadas
    f2 = []      # Archivo auxiliar
    f3 = []      # Archivo auxiliar

    # Comenzamos las fases de mezcla
    while len(f1) + len(f2) > 1:  # Continuamos hasta que quede una sola serie final
        # Elegimos los dos archivos con más series para fusionar
        if len(f1) >= len(f2):
            fuente1, fuente2, destino = f1, f2, f3
        else:
            fuente1, fuente2, destino = f2, f1, f3

        destino.clear()  # Limpiamos el destino

        # Fusionamos series en pares
        while fuente1 and fuente2:
            serie1 = fuente1.pop(0)
            serie2 = fuente2.pop(0)
            destino.append(merge(serie1, serie2))

        # Si queda alguna serie sin pareja, la pasamos directamente al destino
        destino.extend(fuente1)
        destino.extend(fuente2)
        fuente1.clear()
        fuente2.clear()

        # Rotamos los archivos: f1 ← f2 ← f3 ← f1
        f1, f2, f3 = f3, f1, f2

    # El resultado final debe estar en el archivo que tiene la última serie
    resultado_final = f1 if f1 else f2
    return resultado_final[0] if resultado_final else []

# Ejemplo de uso:
# Lista desordenada para ordenar con Polyphase Sort
ejemplo = [5, 1, 9, 3, 7, 2, 8, 6, 4]

# Aplicamos el algoritmo
resultado = polyphase_sort(ejemplo)

print("Lista original:", ejemplo)

# Imprimimos la lista ordenada
print("Lista ordenada:", resultado)
